[gd_scene load_steps=20 format=2]

[ext_resource path="res://assets/script/enemy_healthbar.gd" type="Script" id=1]
[ext_resource path="res://assets/textures/healtbar/enemy_healt_bar_inside.png" type="Texture" id=2]

[sub_resource type="StreamTexture" id=1]
flags = 23
load_path = "res://.import/enemy_healt_bar_outside.png-9ecef7ac31bc9e2b396faa0f672d3b12.s3tc.stex"

[sub_resource type="SpatialMaterial" id=2]
render_priority = 1
flags_transparent = true
flags_unshaded = true
params_billboard_mode = 3
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
albedo_texture = SubResource( 1 )

[sub_resource type="QuadMesh" id=3]
material = SubResource( 2 )
size = Vector2( 1.5, 0.3 )

[sub_resource type="QuadMesh" id=4]
size = Vector2( 0.95, 0.15 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="Gradient" id=6]
offsets = PoolRealArray( 0.986207, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.896552, 0.896552, 0.896552, 1 )

[sub_resource type="GradientTexture" id=7]
gradient = SubResource( 6 )

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = SubResource( 7 )

[sub_resource type="VisualShaderNodeVectorOp" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Uniform" id=11]
uniform_name = "offset"

[sub_resource type="VisualShaderNodeColorOp" id=12]
operator = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=13]
function = 25

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=15]
size = Vector2( 674.449, 162.036 )
expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);"

[sub_resource type="VisualShader" id=16]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx, unshaded;

uniform vec3 offset;
uniform sampler2D tex_frg_3;
uniform sampler2D tex_frg_10 : hint_albedo;



void vertex() {
// Expression:2
	vec3 n_out2p0;
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
	}

// Output:0
	ROUGHNESS = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// VectorUniform:6
	vec3 n_out6p0 = offset;

// VectorOp:4
	vec3 n_out4p0 = n_out5p0 + n_out6p0;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out4p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// ColorOp:7
	vec3 n_in7p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out7p0;
	{
		float base = n_out3p0.x;
		float blend = n_in7p1.x;
		if (base < 0.5) {
			n_out7p0.x = 2.0 * base * blend;
		} else {
			n_out7p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_in7p1.y;
		if (base < 0.5) {
			n_out7p0.y = 2.0 * base * blend;
		} else {
			n_out7p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_in7p1.z;
		if (base < 0.5) {
			n_out7p0.z = 2.0 * base * blend;
		} else {
			n_out7p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, UV.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// VectorOp:9
	vec3 n_out9p0 = n_out7p0 * n_out10p0;

// VectorFunc:8
	vec3 n_out8p0 = round(n_out7p0);

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1343.8, 389.16 )
modes/cull = 2
flags/unshaded = true
nodes/vertex/2/node = SubResource( 15 )
nodes/vertex/2/position = Vector2( -340, 200 )
nodes/vertex/2/size = Vector2( 674.449, 162.036 )
nodes/vertex/2/input_ports = ""
nodes/vertex/2/output_ports = "0,1,output0;"
nodes/vertex/2/expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);"
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 8 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -196.545, 286.182 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( -460, 320 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( -592.665, 288.182 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -660, 440 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( -40, 300 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( 120, 300 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 130.965, 429.472 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( -100, 480 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 6, 0, 4, 1, 3, 0, 7, 0, 7, 0, 8, 0, 10, 0, 9, 1, 8, 0, 0, 1, 9, 0, 0, 0, 7, 0, 9, 0, 5, 0, 4, 0 )

[sub_resource type="ShaderMaterial" id=17]
resource_local_to_scene = true
shader = SubResource( 16 )
shader_param/offset = Vector3( 1, 0, 0 )

[node name="enemy_healtbar" type="Spatial"]
script = ExtResource( 1 )

[node name="outside" type="MeshInstance" parent="."]
transform = Transform( 0.666667, 0, 0, 0, 0.666667, 0, 0, 0, 0.666667, -4.57764e-05, 1.2923, 0 )
mesh = SubResource( 3 )
material/0 = null

[node name="inside" type="MeshInstance" parent="."]
transform = Transform( 0.666667, 0, 0, 0, 0.666667, 0, 0, 0, 0.666667, -4.57764e-05, 1.2923, -0.00244141 )
mesh = SubResource( 4 )
material/0 = SubResource( 17 )
